# Задача 3. Дешифратор
# Что нужно сделать
# Вася решил передать Пете шифрограмму.
# Поскольку о промышленных шифрах Вася ничего не знает, он решил зашифровать сообщение следующим образом: он посылает Пете строку.
#     1. Каждый символ строки — либо буква, либо пробел, либо точка «.», либо две точки «..».
#     2. Если после какой-то буквы стоит точка, значит, мы оставляем букву без изменений (об одной точке Вася задумался, чтобы усложнить расшифровку). Саму точку при этом надо удалить.
#     3. Если после какой-то буквы стоят две точки, то предыдущий символ надо стереть. Обе точки при этом тоже нужно удалить.
#     4. Возможна ситуация, когда сообщение после расшифровки будет пустым. В качестве результата можно вернуть просто пустую строку.
# Примеры шифровок-расшифровок:
# абра-кадабра. → абра-кадабра
# абраа..-кадабра → абра-кадабра
# абраа..-.кадабра → абра-кадабра
# абра--..кадабра → абра-кадабра
# абрау...-кадабра → абра-кадабра (сначала срабатывает правило двух точек, потом правило одной точки)
# абра........ → <пустая строка>
# абр......a. → a
# 1..2.3 → 23
# . → <пустая строка>
# 1....................... → <пустая строка>
# Помогите Пете написать программу для расшифровки.
# Напишите функцию decrypt, которая принимает на вход шифр в виде строки, а возвращает расшифрованное сообщение.
# Программа должна работать через конвейер (pipe):
# $ echo  ‘абраа..-.кадабра’ | python3 decrypt.py 
# абра-кадабра
# Команда echo выводит текст (в стандартный поток вывода).

def decrypt(encrypted_message):
    stack = []
    i = 0

    while i < len(encrypted_message):
        if encrypted_message[i] == '.':
            if i + 1 < len(encrypted_message) and encrypted_message[i + 1] == '.':
                if stack:
                    stack.pop()
                i += 2
            else:
                i += 1
        else:
            stack.append(encrypted_message[i])
            i += 1
    
    return ''.join(stack)

if __name__ == '__main__':
    import sys

    input_data = sys.stdin.read().strip()

    print(decrypt(input_data))