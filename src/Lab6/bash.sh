# Настройка подключения по ssh ключу к удаленному серверу

#Проверим что ssh установлен в системе
ssh -v
# Cгенерируем ассиметричные ключи
ssh-keygen -t rsa -b 2048 -С "ключ Денис" -f den 
# бывают следующие типы:
# - Тип: асимметричный алгоритм цифровой подписи.  
# - Особенности:  
#   - Используется для создания и проверки цифровой подписи.  
#   - Основан на дискретном логарифме в конечных полях.  
#   - Обеспечивает аутентификацию и целостность сообщений.  
# - Применение: в государственных стандартах США (FIPS), электронная подпись, аутентификация.  
# - Недостатки: более медленный, чем RSA, и чувствителен к слабостям генератора случайных чисел.
# ### ECDSA (Elliptic Curve Digital Signature Algorithm)  
# - Тип: асимметричный алгоритм цифровой подписи на основе эллиптических кривых.  
# - Особенности:  
#   - Предлагает тот же уровень безопасности при меньшем размере ключа по сравнению с DSA и RSA.  
#   - Быстрее в генерации и проверке цифровых подписей.  
#   - Энергосберегающий — важен для мобильных и встроенных устройств.  
# - Применение: сертификаты SSL/TLS, криптовалюты, системы с ограниченными ресурсами.
# ### ECDSA-SK  
# - Тип: расширение ECDSA с использованием FIDO Security Key (SK) — аппаратного устройства.  
# - Особенности:  
#   - Применяется для двухфакторной и многофакторной аутентификации.  
#   - Ключи хранятся на физическом устройстве (токене).  
#   - Повышенная безопасность за счет защиты ключей от кражи или копирования.  
# - Применение: безопасный вход (например, WebAuthn), защищённый доступ к системам и сервисам.
# ### Ed25519  
# - Тип: алгоритм цифровой подписи на базе эллиптической кривой Curve25519.  
# - Особенности:  
#   - Высокая скорость генерации и проверки подписей.  
#   - Высокий уровень безопасности и стойкость к современным атакам.  
#   - Простота реализации и небольшие ключи.  
# - Применение: современные протоколы (SSH, TLS), системы контроля версий (Git), криптовалюты.
# ### Ed25519-SK  
# - Тип: Ed25519 с поддержкой Security Key (аппаратный токен).  
# - Особенности:  
#   - Ключи хранятся только на устройстве безопасности.  
#   - Используется для двухфакторной аутентификации с повышенной защитой.  
# - Применение: WebAuthn, безопасный вход и подпись с использованием аппаратных токенов.
# ### RSA (Rivest-Shamir-Adleman)  
# - Тип: классический асимметричный алгоритм шифрования и цифровой подписи(говно мамонта).  
# - Особенности:  
#   - Основывается на факторизации больших чисел.  
#   - Может использоваться и для шифрования, и для подписи.  
#   - Более крупные ключи (2048 бит и выше) необходимы для высокой безопасности.  
#   - Широко поддерживается и используется во многих системах.  
# - Применение: шифрование электронной почты, TLS/SSL, цифровые подписи.
# ### Общие рекомендации по использованию  
# - Алгоритмы с суффиксом -SK (например, ed25519-sk, ecdsa-sk) ориентированы на использование аппаратных токенов безопасности — они добавляют уровень защиты ключей.  
# - Ed25519 и ECDSA предпочтительнее для мобильных и современных приложений из-за сильной безопасности при компактной длине ключей и высокой производительности.  
# - RSA всё ещё широко используется, но требует больших ключей и ресурсов.  
# - DSA сегодня используется редко, уступая место более современным и надежным алгоритмам.

#смотрим содержимое ключа
cat den.pub

#подключаемся к удаленному серверу по ключу
ssh -i den zotov@10.0.2.20

#создаем пользователя
adduser user5
#даем права
usermod -aG sudo user5
#Провереес что пользователь создан корректно
su - user5
#создадим папку с ключами для пользователя user5 и дадим права на нее
mkdir -p .ssh; chmod 700 .ssh
#добавляем публичный ключ или передаем его с исходной машины
echo <key.pub> >> ./.ssh/authorized_keys
#или
ssh-copy-id -i ~/.ssh/id_ed25519.pub user5@remote_host
# редактирование конфига ssh_config на целевой vm
vim /etc/ssh/ssh_config
# добавляем:
PubkeyAuthentication yes 
AuthorizedKeysFile %h/.ssh/authorized_keys
# меняем:
PasswordAuthentication no

systemctl restart sshd
# СЕССИЮ НЕ РВЕМ!!!
# открываем еще один терминал и проверяем вход по ключу.
# Пользуемся с удовольствием!

#обновляем все пакеты и ставим python
$ sudo apt update -y
$ sudo apt install -y build-essential zlib1g-dev libffi-dev libsqlite3-dev libncurses5-dev
$ sudo apt install -y libncursesw5-dev libreadline6-dev libdb5.3-dev
$ sudo apt install -y libgdbm-dev libssl-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev
#Разархивируем в консоли скачанный архив:
sudo tar -xf sudo tar -xf Python-3.13.3.tgz
#Создаем конфигурацию, включи оптимизации:
cd Python-3.13.3/ 
#sudo ./configure --enable-optimizations
#Собираем бинарник в 8 потоков:
sudo make -j 8 
#устанавливаем поверх старой версии:
sudo make install
#Удаляем архив и сборочную папку:
cd ..; sudo rm -Rf Python-3.13.3 Python-3.13.3.tgz
#Устанавливем приложение для виртуального окружения
sudo apt install python3.10-venv –y #Усианавливем приложение для виртуального окружения
#Активируем окружение
sudo python3 -m venv venv #Создаем виртуальное окружение venv
source ./venv/bin/activate 
#Копируем проект с gitlab
git clone https://gitlab/skillbox.ru/learning_materials/python_advanced.git 